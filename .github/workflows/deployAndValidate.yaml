name: PR validation and deploy

on: 
  pull_request:
env:
  froedtert: "froedtert"
  psjh: "psjh"
  acme: "acme"

# tiers
  prod: "prod"
  uat: "uat"
  test: "test"
  dev: "dev"
  preuat: "preuat"

# git credentials
  # GIT_TOKEN: ${{ secrets.ghdevexservacctjenkins }}

jobs:
  # matrix-generator:
  #   runs-on: ubuntu-latest
  #   env:
  #     TENANTS: '[{"name": "acme"}, {"name": "froedtert"}, {"name": "psjh"}]'
  #     TIERS: '[{"name": "test"}, {"name": "uat"}, {"name": "prod"}, {"name": "preuat"}]'
  #   outputs:
  #     matrix: ${{ steps.generate.outputs.matrix }}
  #   steps:
  #     - id: generate
  #       name: generate matrix
  #       run: |
  #         set -x
  #         tenants=$(echo ${TENANTS} | jq -r '.[].name')
  #         tiers=$(echo ${TIERS} | jq -r '.[].name')
  #         # jsonMatrixString="{\"Ts\": ["
  #         jsonMatrixString="{\"include\":["
  #         for tier in ${tiers}
  #         do
  #           for tenant in ${tenants}
  #           do
  #               if [[ ( ${tier} == "prod" ) && ( ${tenant} == "froedtert" ) || ( ${tier} == "uat" ) && ( ${tenant} == "froedtert" ) || ( ${tier} == "prod" ) && ( ${tenant} == "acme" ) || ( ${tier} == "preuat" ) && ( ${tenant} == "acme" ) || ( ${tier}  == "uat" ) && ( ${tenant} == "psjh" ) || ( ${tier} == "prod" ) && ( ${tenant} == "psjh" ) ]]
  #               then
  #                   key="{\"Ts\":\"$tier-$tenant\"},"
  #                   jsonMatrixString="$jsonMatrixString$key"
  #               fi
  #           done
  #         done
  #         jsonMatrixString="${jsonMatrixString%,}]}"
  #         echo "$jsonMatrixString"
  #         echo "::set-output name=matrix::$( echo "$jsonMatrixString" )"

  validate-deploy-job:
    runs-on: ubuntu-latest
    strategy:
      # fail-fast: false
      # matrix: ${{fromJson(needs.matrix-generator.outputs.matrix)}}
      matrix: 
        Ts: ["uat-froedtert", "uat-psjh", "prod-acme", "prod-froedtert", "prod-psjh", "preuat-acme"]
    steps:
    - name: install-dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -yy python3-dev python3-wheel jq npm nodejs --no-install-recommends
        sudo npm install -g ajv-cli
        sudo pip3 install setuptools pyyaml boto3 semver ansicolors awscli
        echo "python3 scripts/test_deliver.py"
        # aws sts get-caller-identity ################THIS MIGHT NOT WORK IN GH Actions
    # - name: checkout-master
    - name: checkout-main
      uses: actions/checkout@v2
      # with:
      #   token: ${{ env.GIT_TOKEN }}
    - name: PR-validation
      run: |
        set -xe
        branch=${GITHUB_REF##*/} echo "scripts/attempt-validation.sh"
        # when you only want to check vs the change target
        # scripts/deliver.py --base-dir ${GITHUB_WORKSPACE}  --commit ${env.CHANGE_TARGET} -lll validate
        # when you want to scan the entire repo
        echo "scripts/deliver.py --base-dir ${GITHUB_WORKSPACE} validate"
        tier=$( echo ${{ matrix.Ts }} | cut -d \- -f 1 )
        tenant=$( echo ${{ matrix.Ts }} | cut -d \- -f 2 )
        echo "::set-env name=tenants::$(echo ${tenants})"
        echo "::set-env name=tier::$(echo ${tier})"
        pwd
        echo "scripts/check-xacct"
    - name: ${{ matrix.Ts }} deployment
      # if: endsWith(${{github.base_ref}},"master")
      if: endsWith(${{github.base_ref}},"main")
      run: |
        # if [[ ${GITHUB_REF##*/} == "master" ]]
        # then
          tier=$( echo ${{ matrix.Ts }} | cut -d \- -f 1 )
          tenant=$( echo ${{ matrix.Ts }} | cut -d \- -f 2 )
          echo "::set-env name=tenants::$(echo ${tenants})"
          echo "::set-env name=tier::$(echo ${tier})"
          pwd
          echo "scripts/deploy"
        # else
        #   echo "This isn't a master branch"
  tagAndPush:
    name: tag and push new image
    runs-on: ubuntu-latest
    needs: validate-deploy-job
    if: endsWith(${{github.base_ref}},"master")
    steps:
    - name: checkout-master
      uses: actions/checkout@v2
      # with:
      #   token: ${{ env.GIT_TOKEN }}
    - name: tagAndPush
      run: |
        echo "scripts/deliver.py -lll tag-repo"
        echo "WRITING THE TAGS BACK TO THE REPO"
        # git push --tags `echo $GITHUB_SERVER_URL | sed "s/github/ghdevexservacctjenkins:$GIT_TOKEN@github/"`
        git push --tags `echo $GITHUB_SERVER_URL`  